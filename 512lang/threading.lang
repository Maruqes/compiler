include("liblang/min.lang")
include("liblang/mem.lang")
include("liblang/strings.lang")
include("liblang/threads.lang")
include("liblang/net.lang")

func worker1(dq p1, dd p2, dw p3, db p4){
	print("worker1(): p1 p2 p3 p4\n");
	printHex(p1);
	printHex(p2);
	printHex(p3);
	printHex(p4);
	ptr printStr<db> = "/";  // '0' - '1' = '/'
	for dq i = 0; i < 5; i++; {
		print("worker1: i=");
		printStr[0] = printStr[0] + 1;
		print(printStr);
		print("\n");
		nanosleep(1, 0);
	}
	return;
}

func worker2(){
	print("worker2(): no params\n");
	ptr printStr<db> = "/";  // '0' - '1' = '/'
	for dq i = 0; i < 10; i++; {
		print("worker2: i=");
		printStr[0] = printStr[0] + 1;
		print(printStr);
		print("\n");
		nanosleep(1, 0);
	}
	return;
}

func main(){
	dq p1 = 0x1111111122222222;
	dq p2 = 0x3333333344444444;
	dd p3 = 0x5555555566666666;
	dw p4 = 0x6666666677777777;

	dq stack_size = 8 * 4096;
	dq t1_id; dq stack_t1 = mmap(8);
	dq t2_id; dq stack_t2 = mmap(8);


	//creating thread 1 with 4 params
	addThreadVariable(stack_t1, stack_size, p1, 0);
    addThreadVariable(stack_t1, stack_size, p2, 1);
    addThreadVariable(stack_t1, stack_size, p3, 2);
    addThreadVariable(stack_t1, stack_size, p4, 3);

	createThreadIds(&worker1, stack_t1, stack_size, &t1_id, 0, 4);

	//creating thread 2 with no params
	createThreadIds(&worker2, stack_t2, stack_size, &t2_id, 0, 0);

	printHex(t1_id);
	printHex(t2_id);
	print("Threads created, joining...\n");
	threadJoin(&t1_id);
	print("Joined thread 1\n");
	threadJoin(&t2_id);
	print("Joined thread 2\n");

	freeMmap(stack_t1, 8);
	freeMmap(stack_t2, 8);
	print("Finished all threads\n");
	return;
}