
global{
}


include("liblang/min.lang")
include("liblang/mem.lang")
include("liblang/strings.lang")
include("liblang/threads.lang")
include("liblang/net.lang")
include("liblang/file.lang")


struct Person{
	db name db<50>;
	dq age;
	db phone db<9>;
}

func checkNumber(ptr str){
	dd strLen = getStringLen(str);
	for dq i = 0; i < strLen; i++; {
		if (*<db>(str + i) < '0') || (*<db>(str + i) > '9') {
			return 0; // not a number
		}
	}
	return 1; // is a number
}

func addPerson(dq fd){
	ptr p<Person> = Person{};

	print("Enter name: \n");
	memset(&p.name, 50, 0);
	read(&p.name, 50);
	print("You entered: ");
	print(&p.name);

	print("Enter age: \n");
	dq ageInput = brk(10);
	memset(ageInput, 10, 0);
	dq len = read(ageInput, 10);
	ageInput[len - 1] = 0; // null-terminate
	p.age = string_to_int(ageInput);

	if !checkNumber(ageInput) {
		print("Invalid age input. Age must be a number.\n");
		freeBrk(ageInput);
		return;
	}

	print("Enter phone (9 digits): \n");
	memset(&p.phone, 9, 0);
	len = read(&p.phone, 9);
	*<db>(&p.phone + len - 1) = 0; // null-terminate

	if !checkNumber(&p.phone) {
		print("Invalid phone input. Phone must be a 9-digit number.\n");
		freeBrk(ageInput);
		return;
	}

	append_all(fd, p, sizeof(Person));

	freeBrk(ageInput);
}

func readPerson(dq fd){
	ptr p<Person> = Person{};
	dq bytesRead = sys_read(fd, p, sizeof(Person));
	if bytesRead != sizeof(Person) {
		print("Error reading person or end of file\n");
		return;
	}
	print("Name: ");
	print(&p.name);

	print("\nAge: ");
	dq ageBuf = brk(10);
	int_to_string(p.age, ageBuf, 10);
	print(ageBuf);

	print("\nPhone: ");
	print(&p.phone);
	print("\n---\n");

	if !check_eof(fd) {
		readPerson(fd);
		return;
	}
	return;
}

func main(){
	dq fileName = "people.txt";

	dq fd = sys_open(fileName, O_RDWR | O_CREAT, 420);
	if fd < 0 { 
		print("Could not open or create file\n");
		return 0; 
	}

	dq response = brk(10);
	print("What do you want to do?\n1 - Add person\n2 - List people\n");
	read(response, 2);
	if response[0] == '1' {
		addPerson(fd);
	}elif response[0] == '2' {
		print("Listing people:\n");
		readPerson(fd);
	}else{
		print("Invalid option\n");
	}

	freeBrk(response);
	sys_close(fd);
	return;
}