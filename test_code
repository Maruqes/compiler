
func dd test(){
    return 10;
}

func dd test_whiles(){
    dd a = 0;
    while a < 10 {
        a = a + 1;
    }
    return a;
}


func dd test_deaddressing(){
    dd a = 10;
    dd*b = &a;
    dd*c = &b;
    dd*d = &c;
    return ***d;
}

func dd test_ifs(){
    dd a = 0;
    if a = 0 {
        a = 10;
    }
    return a + 1 - 1;
}

func dd test_arrays_arr_string(){
    const string testS = "Hello\n";
    return 0;
}

func dd test_fors(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        a = a + 1;
    }
    return a;
}

func dd testRecursion(dd a){
    if a < 10 {
        return testRecursion(a + 1);
    }
    return a;
}

func dd test_params(dd a, dd b, dd c){
    return a + b + c;
}

func dd nestedForLoops(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        for dd j = 0; j < 10; j++;{
            a = a + 1;
        }
    }
    return a;
}

func dd nestedIfs(){
    dd a = 0;
    dd b = 20;
    
    if a < 10 {
        if b > 10 {
            a = 10;
        }
    }
    return 10;
}

func dd ret10if10(dd a){
    if a = 10 {
        return 10;
    }
    return 0;
}


func dd allocMem1Page(dd pge){
    dd page = pge * 4096;
    asm(mov32 ecx page);
    asm(mov32 eax 192);
    asm(mov32 ebx 0);
    asm(mov32 edx 3);
    asm(mov32 esi 34);
    asm(mov32 edi -1);
    asm(syscall);
    return;
}

func dd createString(){
    asm(pusha);
    dd page1 = allocMem1Page(2);
    asm(popa);
    return page1;
}

func dd setLetter(dd addr, dd offset, dd letter){

    asm(mov32 ecx addr);
    asm(mov8 bl letter);
    asm(mov32 eax offset);
    asm(mov8_mr_r ecx eax bl);

    return 0;
}

func dd main()
{
   
    dd addr = createString();

    db H = 'H';
    db E = 'M';

    H = 65346;

    setLetter(addr, 0, H);
    setLetter(addr, 1, E);
    setLetter(addr, 2, 'L');
    setLetter(addr, 3, 'L');
    setLetter(addr, 4, 'O');
    setLetter(addr, 5, 10);


    asm(mov32 ecx addr);
    asm(mov32 ebx 1);
    asm(mov32 eax 4);
    asm(mov32 edx 6);
    asm(syscall);



    return 350;
}