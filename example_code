
func int test(){
    return 10;
}

func int test_whiles(){
    int a = 0;
    while a < 10 {
        a = a + 1;
    }
    return a;
}


func int test_deaddressing(){
    int a = 10;
    int*b = &a;
    int*c = &b;
    int*d = &c;
    return ***d;
}

func int test_ifs(){
    int a = 0;
    if a = 0 {
        a = 10;
    }
    return a + 1 - 1;
}

func int test_arrays_arr_string(){
    const string testS = "Hello\n";
    return 0;
}

func int test_fors(){
    int a = 0;
    for int i = 0; i < 10; i++;{
        a = a + 1;
    }
    return a;
}

func int testRecursion(int a){
    if a < 10 {
        return testRecursion(a + 1);
    }
    return a;
}

func int test_params(int a, int b, int c){
    return a + b + c;
}

func int nestedForLoops(){
    int a = 0;
    for int i = 0; i < 10; i++;{
        for int j = 0; j < 10; j++;{
            a = a + 1;
        }
    }
    return a;
}

func int nestedIfs(){
    int a = 0;
    int b = 20;
    
    if a < 10 {
        if b > 10 {
            a = 10;
        }
    }
    return 10;
}

func int ret10if10(int a){
    if a = 10 {
        return 10;
    }
    return 0;
}


func int allocMem1Page(int a, int b){
    int pge = 1;
    asm(mov32 ecx pge);
    asm(mov32 eax 192);
    asm(mov32 ebx 0);
    asm(mov32 edx 3);
    asm(mov32 esi 34);
    asm(mov32 edi -1);
    asm(syscall);
    return;
}

func int main()
{
    int result = -1 + 1;

    int mds = 60;
    int a = 10;
    int *b = &a;


    int c = 20;
    int *d = &c;
    int mdsquelindo = 100;

    result = result + test_whiles();
    result = result + test();
    result = result + test_fors();
    result = result + test_ifs();
    result = result + test_deaddressing();  
    result = result + test_params(*b+1-2+1, *d+60+30-90 + mdsquelindo - mdsquelindo, 30+10-10);
    result = result + testRecursion(1);
    result = result + nestedForLoops();
    result = result + nestedIfs();
    for int i = 0; i < 10; i++;{
       result = result + ret10if10(10);
    }
        
    result++;    
    result--;

    int testeasm = 4;
    int testeasm2 = 1;
    
  
    asm(mov32 eax 0);

    asm(create_label testLabel);
    asm(push eax);

    asm(pusha);
    int page1 = allocMem1Page();
    asm(popa);

    asm(mov32 ebx page1);
    asm(mov32 eax 65);
    asm(mov32 ecx 0);

    
    asm(mov32_mr_r ebx ecx eax);

    asm(mov32 eax 0);
    asm(mov32_r_mr eax ebx ecx);

    asm(inc ecx);
    asm(inc eax);
    asm(mov32_mr_r ebx ecx eax);
    asm(inc ecx);
    asm(inc eax);
    asm(mov32_mr_r ebx ecx eax);
    asm(inc ecx);
    asm(inc eax);
    asm(mov32_mr_r ebx ecx eax);
    
    asm(mov32_mi_i ebx 4 10);



   


    asm(mov32 ecx ebx);
    asm(mov32 ebx testeasm2);
    asm(mov32 eax testeasm);
    asm(mov32 edx 5);
    asm(syscall);

    asm(pop eax);
    asm(inc eax);
    asm(mov32 ebx 2);
    asm(cmp32 eax ebx);
    asm(jne testLabel);


    asm(mov32 ecx 350);
    asm(mov32 eax ecx);
    asm(mov32 result eax);




    return result;
}