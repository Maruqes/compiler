
func int test(){
    return 10;
}

func int test_whiles(){
    int a = 0;
    while a < 10 {
        a = a + 1;
    }
    return a;
}


func int test_deaddressing(){
    int a = 10;
    int*b = &a;
    int*c = &b;
    int*d = &c;
    return ***d;
}

func int test_ifs(){
    int a = 0;
    if a = 0 {
        a = 10;
    }
    return a + 1 - 1;
}

func int test_arrays_arr_string(){
    const string testS = "Hello\n";
    return 0;
}

func int test_fors(){
    int a = 0;
    for int i = 0; i < 10; i++;{
        a = a + 1;
    }
    return a;
}

func int testRecursion(int a){
    if a < 10 {
        return testRecursion(a + 1);
    }
    return a;
}

func int test_params(int a, int b, int c){
    return a + b + c;
}

func int nestedForLoops(){
    int a = 0;
    for int i = 0; i < 10; i++;{
        for int j = 0; j < 10; j++;{
            a = a + 1;
        }
    }
    return a;
}

func int nestedIfs(){
    int a = 0;
    int b = 20;
    
    if a < 10 {
        if b > 10 {
            a = 10;
        }
    }
    return 10;
}

func int ret10if10(int a){
    if a = 10 {
        return 10;
    }
    return 0;
}


func int allocMem1Page(int pge){
    int page = pge * 4096;
    asm(mov32 ecx page);
    asm(mov32 eax 192);
    asm(mov32 ebx 0);
    asm(mov32 edx 3);
    asm(mov32 esi 34);
    asm(mov32 edi -1);
    asm(syscall);
    return;
}

func int createString(){
    asm(pusha);
    int page1 = allocMem1Page(2);
    asm(popa);
    return page1;
}

func int setLetter(int addr, int offset, int letter){

    asm(mov32 ecx addr);
    asm(mov8 bl letter);
    asm(mov32 eax offset);
    asm(mov8_mr_r ecx eax bl);

    return;
}

func int main()
{
   
    int addr = createString();
    setLetter(addr, 0, 'H');
    setLetter(addr, 1, 'E');
    setLetter(addr, 2, 'L');
    setLetter(addr, 3, 'L');
    setLetter(addr, 4, 'O');
    setLetter(addr, 5, 10);


    asm(mov32 ecx addr);
    asm(mov32 ebx 1);
    asm(mov32 eax 4);
    asm(mov32 edx 6);
    asm(syscall);



    return 350;
}