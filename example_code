func test(){
    return 10;
}

func test_whiles(){
    dd a = 0;
    while a < 10 {
        a = a + 1;
    }
    return a;
}


func test_deaddressing(){
    db a = 10;
    db*b = &a;
    db*c = &b;
    db*d = &c;
    return ***d;
}

func test_ifs(){
    dd a = 0;
    if a = 0 {
        a = 10;
    }
    return a + 1 - 1;
}

func test_fors(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        a = a + 1;
    }
    return a;
}

func testRecursion(db a){
    if a < 10 {
        a = a + 1;
        return testRecursion(a);
    }
    return a;
}

func test_params(db a, db b, db c, dw d, db e){
    return a + b + c + d + e;
}

func nestedForLoops(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        for dd j = 0; j < 10; j++;{
            a = a + 1;
        }
    }
    return a;
}

func nestedIfs(){
    dd a = 0;
    dd b = 20;
    
    if a < 10 {
        if b > 10 {
            a = 10;
        }
    }
    return 10;
}

func ret10if10(db a){
    if a = 10 {
        return 10;
    }
    return 0;
}


func allocMem1Page(dd pge){
    dd page = pge * 4096;
    asm(mov32 eax 192);
    asm(mov32 ebx 0);
    asm(mov32 ecx page);
    asm(mov32 edx 3);
    asm(mov32 esi 34);
    asm(mov32 edi -1);
    asm(syscall);
    return;
}

func createString(){
    asm(pusha);
    dd page1 = allocMem1Page(2);
    asm(popa);
    return page1;
}

func setLetter(dd addr, dd offset, db letter, dw letter2){

    if letter2 = 65535{
        return 0;
    }

    asm(mov32 ecx addr);
    asm(mov8 bl letter);
    asm(mov32 eax offset);
    asm(mov8_mr_r ecx eax bl);

    return 0;
}


func getStringLen(dd addr){
    dd len = 0;

    while 1 = 1{

        db letter = 0;
        
        asm(mov32 ebx 0);
        asm(mov32 ecx addr);
        asm(mov32 eax len);
        asm(mov8_r_mr bl ecx eax);
        asm(mov8 letter bl);

        if letter = 0 {
            return len;
        }
        len = len + 1;
    }

    return len;
}

func printString(dd addr){

    dd len = getStringLen(addr);

    asm(mov32 ecx addr);
    asm(mov32 ebx 1);
    asm(mov32 edx len);
    asm(mov32 eax 4);
    asm(syscall);
    return 0;
}

func printStringLen(dd addr, dd len){

    asm(mov32 ecx addr);
    asm(mov32 ebx 1);
    asm(mov32 edx len);
    asm(mov32 eax 4);
    asm(syscall);
    return 0;
}

func main()
{
    dd total = 0;

    // Testes individuais
    total = total + test();               // Espera 10
    total = total + test_whiles();        // Espera 10
    total = total + test_deaddressing();  // Espera 10
    total = total + test_ifs();           // Espera 10
    total = total + test_fors();          // Espera 10
    total = total + testRecursion(0);     // Espera 10
    total = total + test_params(4,1,1,1,3); // Espera 10
    total = total + nestedForLoops();     // Espera 100
    total = total + nestedIfs();          // Espera 10
    total = total + ret10if10(10);        // Espera 10

    // Verificar soma final das funções (deveria ser 190)
    if total ! 190 {
        return 0;
    }


    dd addr = createString();

    db H = 'P';
    db E = 'E';

    H = 65352;

    setLetter(addr, 0, H, 4294967294);
    setLetter(addr, 1, E, 0);
    setLetter(addr, 2, 'L', 0);
    setLetter(addr, 3, 'L', 0);
    setLetter(addr, 4, 'O', 0);
    setLetter(addr, 5, 'O', 0);
    setLetter(addr, 6, '_', 0);
    setLetter(addr, 7, 'M', 0);
    setLetter(addr, 8, 'U', 0);
    setLetter(addr, 9, 'N', 0);
    setLetter(addr, 10, 'D', 0);
    setLetter(addr, 11, 'O', 0);
    setLetter(addr, 12, 10, 0);

    printStringLen(addr, 13);

    dd s;
    CreateString("Hello World\n");
    asm(mov32 s eax);

    dd s2 = CreateString("Hello World2\n");

    //example comment
    printString(s);     // ola
    printString(s2);


    ff testeFloat = f3.14;

    // if testeFloat = 1078523331 {
    //     return 0;
    // }

    ff testeFloat2 = 350;
    ff* testeFloat3 = &testeFloat2;
    ff* testeFloat4 = &testeFloat3;
    ff* testeFloat5 = &testeFloat4;



    return ***testeFloat5;
}