global{
    dq aGlob = 5;
}

// include can be done like->  include("test3.lang")
include("liblang/min.lang")
include("liblang/mem.lang")
include("liblang/strings.lang")

struct MyStruct {
    dq field1;
    dq field2;
    db field3;
}

struct MyStruct2 {
	db field1;
	db field2;
	db field3;
	db field4;
	db field5 MyStruct<1>;
	db field5 db<4>;
	db field6;
}



func structsT(){
	ptr structName<MyStruct> = MyStruct{1,2,3};

	ptr test<MyStruct2> = MyStruct2{};

    printHex(structName);
    printHex(structName.field1);
    printHex(structName.field2);
    printHex(structName.field3);
    printHex(test);
	return;
}

func vars(){
	dq a = 10;
	dd b = 5;
	dw c = 2;
	db d = 1;

	a++;
	a++;
	a--;

	b++;
	b++;
	b--;

	c++;
	c++;
	c--;

	d++;
	d++;
	d--;

	printHex(a);
	printHex(b);
	printHex(c);
	printHex(d);

	//negative symbol and type affirmation
	printHex(-dq(a));
	printHex(-dd(b));
	printHex(-dw(c));
	printHex(-db(d));

	return;
}


func flow(){
	//whiles
	dd a = 0;
	while a < 5 {
		printHex(a);
		a++;
	}

	//fors
	for dq i = 0; i < 5; i++; {
		printHex(i);
	}
	//ifs

	if a == 5 {
		printHex(a);
	}

	if a != 6 {
		printHex(a);
	}

	if a > 4 {
		printHex(a);
	}

	if a < 6 {
		printHex(a);
	}


	if a != 5{
		printHex(0xff);
	}elif a == 5{
		printHex(0xff00);
	}

	if a != 5{
		printHex(0xff);
	}elif a == 6{
		printHex(0xff00);
	}else {
		printHex(0xff0000);
	}

	while a > 0 {
		printHex(a);
		break;
	}

	for dq i = 0; i < 5; i++; {
		if i >= 1 {
			continue;
		}
		printHex(i);
	}

	return;
}

func pointers(){
	dq a = 5;
	dd b = 6;
	dw c = 7;
	db d = 8;

	ptr aP<dq> = &a;
	ptr bP<dd> = &b;
	ptr cP<dw> = &c;
	ptr dP<db> = &d;

	ptr aPP<dq> = &aP;
	ptr bPP<dd> = &bP;
	ptr cPP<dw> = &cP;
	ptr dPP<db> = &dP;

	printHex(*aP);
	printHex(*bP);
	printHex(*cP);
	printHex(*dP);

	printHex(**aPP);
	printHex(**bPP);
	printHex(**cPP);
	printHex(**dPP);

	return;
}


func strings(){
	ptr str = "Hello, World!\n";
	printHex(str);
	print(str);
	return;
}

func functionParams(dq a, dd b, dw c, db d, ptr e){
	printHex(a);
	printHex(b);
	printHex(c);
	printHex(d);
	printHex(*e);
	return;
}

func globalVars(){
	printHex(aGlob);
	printHex(aGlob);
	return;
}

func arraysT(){

	dq arr<dq> = dq{1,2,3,4,5};
	printHex(arr);

	for dq i = 0; i < 5; i++; {
		printHex(arr[i]);
	}

	dq matrix<dq> = dq{dq{1, 2}, dq{3, 4}};
	for dq i = 0; i < 2; i++; {
		for dq j = 0; j < 2; j++; {
			printHex(matrix[i][j]);
		}
	}

	return;
}

func arithmetics(){
	dq a = 5;
	dd b = 10;
	dw c = 15;
	db d = 20;

	printHex(a + b);
	printHex(b - c);
	printHex(c * d);
	printHex(d / a);

	return;
}


func kernelInfo2(){

	ptr memInfo = db<390>;

	asm(mov64_r_i, rax, 63);
	loadReg(rdi, memInfo);
	asm(syscall);

	for dq i = 0; i < 6; i++; {
		print(memInfo + (i * 65));
		print("\n");
	}
	return;
}

struct utsname {
    db domainname db<65>;
    db machine db<65>;  
    db version db<65>; 
    db release db<65>;
    db nodename db<65>; 
    db sysname db<65>;   
}

func kernelInfo(){
	ptr structName<utsname> = utsname{};

	asm(mov64_r_i, rax, 63);
	loadReg(rdi, structName);
	asm(syscall);

	printHex(structName.sysname); //first letter
	print(&structName.sysname);
	print("\n");
	print(&structName.nodename);
	print("\n");
	print(&structName.release);
	print("\n");
	print(&structName.version);
	print("\n");
	print(&structName.machine);
	print("\n");
	print(&structName.domainname);
	return;
}

func retornoDQ(){
	dq res = 0x0123456789abcdef;
	return res;
}

func retornoDD(){
	dd res = 0x0123456789abcdef;
	return res;
}

func retornoDW(){
	dw res = 0x0123456789abcdef;
	return res;
}

func retornoDB(){
	db res = 0x0123456789abcdef;
	return res;
}

func clock_gettimeExec(){
	ptr ts<timespec> = timespec{};
	clock_gettime(ts);
	printHex(ts.tv_sec);
	printHex(ts.tv_nsec);
	return;
}

func main(dq argc){

	structsT();
	print("\n");
	vars();
	print("\n");
	flow();
	print("\n");
	pointers();
	print("\n");
	strings();
	print("\n");

	dq e = 5;
	functionParams(1, 2, 3, 4, &e);

	print("\n");
	globalVars();
	print("\n");
	arraysT();
	print("\n");
	arithmetics();
	print("\n");
	kernelInfo();
	print("\n");
	kernelInfo2();
	printHex(retornoDQ());
	printHex(retornoDD());
	printHex(retornoDW());
	printHex(retornoDB());
	printHex(dd(retornoDQ()));
	printHex(dw(retornoDQ()));
	printHex(db(retornoDQ()));

	ptr stringMem = db<200>;
	memset(stringMem, 200, 0);
	read(stringMem, 200);
	reverseString(stringMem);
	print(stringMem);


	//cannot be called inside defer cause its another func
	dq rbpVar;
	loadVar(rbpVar, rbp);
	ptr args<dq> = getArgsPtr(argc, rbpVar);

	for dq i = 0; i < argc; i++; {
		print("arg ");
		print(args[i]);
		print("\n");
	}

	nanosleep(1,0);
	clock_gettimeExec();
	exit(69);

    return;
}
