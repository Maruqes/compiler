
global{
	dq AF_INET = 2;
	dq SOCK_STREAM = 1;
	dq IPPROTO_TCP = 6;
	dq MSG_NOSIGNAL = 0x4000; // prevent SIGPIPE on send when peer closed
}

// Linux struct sockaddr_in (16 bytes)
// struct sockaddr_in {
//   sa_family_t sin_family;   // 2 bytes
//   in_port_t   sin_port;     // 2 bytes (network byte order)
//   struct in_addr sin_addr;  // 4 bytes (network byte order)
//   unsigned char sin_zero[8];// padding
// };
struct sockaddr_in{
	 dw family;    // AF_INET
	 dw port;      // network order
	 dd addr;      // network order (e.g. 0x7F000001 for 127.0.0.1)
	 db zero db<8>;// padding
}

// Byte order helpers (host -> network). Host assumed little-endian x86_64.
func htons(dq v){
	dq r = ((v & 0xff) << 8) | ((v >> 8) & 0xff);
	return r;
}

func htonl(dq v){
	dq b1 = (v & 0x000000ff) << 24;
	dq b2 = (v & 0x0000ff00) << 8;
	dq b3 = (v & 0x00ff0000) >> 8;
	dq b4 = (v & 0xff000000) >> 24;
	dq r = b1 | b2 | b3 | b4;
	return r;
}

func sys_socket(dq AF_INET, dq SOCK_STREAM, dq IPPROTO_TCP){
	asm(mov64_r_i, rax, 41);
	loadReg(rdi, AF_INET);
	loadReg(rsi, SOCK_STREAM);
	loadReg(rdx, IPPROTO_TCP);
	asm(syscall);
	return;
}

func sys_connect(dq sockfd, ptr serv_addr, dq addrlen){
	asm(mov64_r_i, rax, 42);
	loadReg(rdi, sockfd);
	loadReg(rsi, serv_addr);
	loadReg(rdx, addrlen);
	asm(syscall);
	return;
}

func sys_poll(ptr fds, dq nfds, dq timeout){
	asm(mov64_r_i, rax, 7);
	loadReg(rdi, fds);
	loadReg(rsi, nfds);
	loadReg(rdx, timeout);
	asm(syscall);
	return;
}

func sys_read(dq fd, ptr buf, dq count){
	asm(mov64_r_i, rax, 0);
	loadReg(rdi, fd);
	loadReg(rsi, buf);
	loadReg(rdx, count);
	asm(syscall);
	return;
}

func sys_write(dq fd, ptr buf, dq count){
	asm(mov64_r_i, rax, 1);
	loadReg(rdi, fd);
	loadReg(rsi, buf);
	loadReg(rdx, count);
	asm(syscall);
	return;
}

// send using sendto syscall with flags (e.g., MSG_NOSIGNAL). dest null for connected stream.
func sys_send(dq fd, ptr buf, dq len, dq flags){
	asm(mov64_r_i, rax, 44); // sendto
	loadReg(rdi, fd);
	loadReg(rsi, buf);
	loadReg(rdx, len);
	loadReg(r10, flags);
	asm(mov64_r_i, r8, 0);  // dest_addr
	asm(mov64_r_i, r9, 0);  // addrlen
	asm(syscall);
	return;
}

func sys_close(dq fd){
	asm(mov64_r_i, rax, 3);
	loadReg(rdi, fd);
	asm(syscall);
	return;
}