
global{
    dq wait = 1;
}


include("liblang/min.lang")
include("liblang/mem.lang")
include("liblang/strings.lang")
include("liblang/threads.lang")

// --- Worker A call chain ---
func A2(dq sleep){
    print("A2 start\n");
    nanosleep(sleep,0);
    nanosleep(sleep,0);
    print("A2 end\n");
    return;
}

func A1(dq sleep){
    print("A1 start\n");
    nanosleep(sleep,0);
    A2(sleep);
    print("A1 end\n");
    return;
}

func workerA(){
    wait++;
    dq sleep = wait;
    A1(sleep);
    print("workerA start\n");
    print("workerA end\n");
    A2(sleep);
    return;
}

func test(ptr a, ptr b<dd>){
    printHex(*a);
    printHex(*b);
    return;
}

func main() {
    dq a = 0x123456789abcdef0;
    dq b = 0xdeadbeefcafebabe;
    test(&a, &a);
    test(&b, &b);


    ptr tids = dd<5>;

    for dd i = 0; i < 5; i++; {
        dq SZ = 5 * 4096;
        ptr stack = mmap(5);
        createThreadIds(&workerA, stack, SZ, tids + (i*4), 0);
        nanosleep(0, 100000);
    }

    for dd i = 0; i < 5; i++; {
        print("Waiting thread ");printHex(i);
        threadJoin(tids + (i*4));
        print("Joined thread ");printHex(i);
    }



    // exit(0);
    return;
}