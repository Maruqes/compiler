
global{
    dq wait = 1;          // simple shared counter (not atomic) just for variation
    dq thread_iterations = 3;
}


include("liblang/min.lang")
include("liblang/mem.lang")
include("liblang/strings.lang")
include("liblang/threads.lang")
include("liblang/net.lang")



func main() {
    dq sock = sys_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if sock < 0 { print("socket() failed\n"); return; }

    dq addr<sockaddr_in> = sockaddr_in{};
    addr.family = AF_INET;
    addr.port = htons(8080);
    addr.addr = htonl(0x7F000001); // 127.0.0.1

    print("Attempt connect...\n");
    dq r = sys_connect(sock, addr, 16);
    if r < 0 { print("connect() failed\n"); return; }
    print("connected\n");

    db msg = db<64>;
    memcpy(&msg, "hello from custom runtime", 25);
    dq w = sys_send(sock, &msg, 25, MSG_NOSIGNAL);
    print("send ret: "); printHex(w);
    if w < 0 { print("send failed\n"); }

    db buf = db<128>;
    dq rr = sys_read(sock, &buf, 128);
    print("read ret: "); printHex(rr);
    if rr == 0 { print("peer closed\n"); }
    if rr < 0 { print("read failed\n"); }
    if rr > 0 { printMem(&buf, rr); }

    sys_close(sock);
    return;
}