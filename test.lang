
global{
}


include("liblang/min.lang")
include("liblang/mem.lang")
include("liblang/strings.lang")
include("liblang/threads.lang")

func test(){
    dq sp;
    dq bp;
    dq local = 0;

    loadVar(sp, rsp);
    loadVar(bp, rbp);

    print("child thread:\n");
    print("  rsp="); printHex(sp);
    print("  rbp="); printHex(bp);
    print("  &local="); printHex(&local);
    print("test\n");
    return;
}


func main(dq argc) {
    dq stack_size = 8192;
    ptr pStack = mmapFlags(stack_size, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, PROT_READ|PROT_WRITE); //8KB stack

    print("parent:\n");
    dq spParent;
    dq bpParent;
    dq localParent = 0;
    loadVar(spParent, rsp);
    loadVar(bpParent, rbp);
    print("  rsp="); printHex(spParent);
    print("  rbp="); printHex(bpParent);
    print("  &local="); printHex(&localParent);

    print("child stack region:\n");
    print("  base="); printHex(pStack);
    print("  top ="); printHex(pStack + stack_size);

    createThread(&test, pStack, stack_size);
    nanosleep(1,0);

    return;
}