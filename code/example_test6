include "includes/arrays"
include "includes/strings"
include "includes/floats"
include "includes/files"
include "includes/web"

struct myOwn{
    dd a;
    dd b;
}


func a(dd s1add){
    myOwn s1(0, 0);
    s1 = s1add;
    s1.a = x42424242;
    s1.b = x42424242;
    return;
}

func main(){

    // //do test and example for all codes
    dd s3 = x42424242;
    dd s2 = x42424242;
    myOwn s1(x41414141, x42424242);

    asm(mov32 eax s1);

    asm(mov8_mi_i eax 4 69);
    asm(mov8_mi_i eax 5 70);
    asm(mov8_mi_i eax 6 71);
    asm(mov8_mi_i eax 7 72);

    a(s1);

    
    printChar(getDBArrayValue(s1, 0));
    printChar(getDBArrayValue(s1, 1));
    printChar(getDBArrayValue(s1, 2));
    printChar(getDBArrayValue(s1, 3));
    printChar(getDBArrayValue(s1, 4));
    printChar(getDBArrayValue(s1, 5));
    printChar(getDBArrayValue(s1, 6));
    printChar(getDBArrayValue(s1, 7));
    newline();
    printHex(s2);
    newline();
    printHex(s3);
    newline();

    if s2 ! x42424242 | s3 ! x42424242 {
        printString(CString("Does Not Work\n"));
    } else {
        printString(CString("Works\n"));
    }

    s1.a = xFFFFFFFF;

    dd s1a = 1 + s1.a;

    if s1a = 0 {
        printString(CString("Works\n"));
    } else {
        printString(CString("Does Not Work\n"));
    }

    dd pls = s1$b - s1$a;

    if pls = 4 {
        printString(CString("Works\n"));
    } else {
        printString(CString("Does Not Work\n"));
    }

    //what should work in the future
    
    //s1-a = addr(s1) + offset(a);
    //s1.a = valor(addr(s1) + offset(a));

    // dd test = s1.a;
    // dd test2 = s1.b + 1 * 3;

    return 0;
    // s1.a = 5;
    // s1.b = 4;
    // s1.c = 3;
    // s1.d = 2;
    // s1.e = 1;

    dd resultString = CString("Works\n");
    dd notresultString = CString("Does Not Work\n");

    dd a = 1 + 1; // sum
    dd b = 1 - 1; // sub
    dd c = 1 * 1; // mul
    dd d = 1 / 1; // div 
    dd e = 1 % 1; // mod
    dd f = 1 = 1; // equal
    dd g = 1 ! 1; // not equal
    dd h = 1 < 1; // less than
    dd i = 1 > 1; // greater than

    dd j = 1 & 1; // and
    dd k = 1 | 1; // or
    dd l = 1 ^ 1; // xor
    dd m = ~1; // not

    dd n = 1 [ 1; // shift left
    dd o = 1 ] 1; // shift right

    if a = 2 & b = 0 & c = 1 & d = 1 & e = 0 & f = 1 & g = 0 & h = 0 & i = 0 & j = 1 & k = 1 & l = 0 & m = -2 & n = 2 & o = 0 {
        printString(resultString);
    } else {
        printString(notresultString);
    }

    return 350;
}   
