include "includes/strings"
include "includes/floats"
include "includes/arrays"
include "includes/web"
include "includes/files"
// func create_sockaddr_in(dw sin_family, dw sin_port, dd sin_addr){
//     dd addr = allocMemPage(1);
//     //sin_family
//     setDBArrayValue(addr, 0, sin_family);
//     setDBArrayValue(addr, 1, x00);

//     //sin_port
//     setDBArrayValue(addr, 2, sin_port & 0xff);
//     setDBArrayValue(addr, 3, (sin_port >> 8) & 0xff);

//     //sin_addr  
//     setDWArrayValue(addr, 4, sin_addr);

//     setDWArrayValue(addr, 8, x00);

//     return addr;
// }

func create_sockaddr_in(db sin_family, dw sin_port, dd sin_addr){
    dd addr = allocMemPage(1);
    //sin_family
    setDBArrayValue(addr, 0, sin_family);
    setDBArrayValue(addr, 1, x00);

    //sin_port
    setDBArrayValue(addr, 2, sin_port & xff);
    dd temp = sin_port ] 8;
    setDBArrayValue(addr, 3, temp & xff);

    //sin_addr  
    setDWArrayValue(addr, 4, sin_addr);

    setDWArrayValue(addr, 8, x00);

    return addr;
}

func main(){
    dd mds = createSocket();

    dd errS = CString("Erro ao aceitar\n"); 

    dd addr = create_sockaddr_in(x02, x901f, x0100007f);
    // //sin_family
    // setDBArrayValue(addr, 0, x02);
    // setDBArrayValue(addr, 1, x00);

    // //sin_port
    // setDBArrayValue(addr, 2, x1f);
    // setDBArrayValue(addr, 3, x90);

    // //sin_addr  
    // setDWArrayValue(addr, 4, x7f);
    // setDWArrayValue(addr, 5, x00);
    // setDWArrayValue(addr, 6, x00);
    // setDWArrayValue(addr, 7, x01);

    // //sin_zero
    // setDWArrayValue(addr, 8, x00);
    // setDWArrayValue(addr, 9, x00);
    // setDWArrayValue(addr, 10, x00);
    // setDWArrayValue(addr, 11, x00);
    
    // //sin_zero
    // setDWArrayValue(addr, 12, x00);
    // setDWArrayValue(addr, 13, x00);
    // setDWArrayValue(addr, 14, x00);
    // setDWArrayValue(addr, 15, x00);


    dd addrlen = 16;


    bind(mds, addr, addrlen);
    listen(mds, 5);

    dd http_response = CString("HTTP/1.1 200 OK\r\nContent-Length: 11\r\n\r\nHello World");
    dd http_response_len = getStringLen(http_response);

    // Loop do servidor: aceita ligações e envia a resposta HTTP
    while 1 = 1 {
        // Accept: accept(socket, NULL, NULL)
        // Coloca o descriptor do socket do servidor (mds) em eax
        dd acc = accept(mds);
        socketcall(acc, http_response, http_response_len);
        close(acc);
    }
    return 0;
}   
