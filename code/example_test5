include "includes/arrays"
include "includes/strings"
include "includes/floats"
include "includes/files"
include "includes/web"

func create_sockaddr_in(db sin_family, dw sin_port, dd sin_addr){
    dd addr = allocMemPage(1);
    //sin_family
    setDBArrayValue(addr, 0, sin_family);
    setDBArrayValue(addr, 1, x00);

    //sin_port
    setDBArrayValue(addr, 3, sin_port & x00ff);
    dd temp = sin_port ] 8;
    setDBArrayValue(addr, 2, temp & xff);

    //sin_addr  
    setDWArrayValue(addr, 4, sin_addr);

    setDWArrayValue(addr, 8, x00);

    return addr;
}

func createIpHex (dd a, dd b, dd c, dd d){
    return a | b [ 8 | c [ 16 | d [ 24;
}

func main(){
    dd socket = createSocket();

    dd errS = CString("Erro ao aceitar\n"); 

    dd addr = create_sockaddr_in(2, 8080, createIpHex(127, 0, 0, 1));
    dd addrlen = 16;


    bind(socket, addr, addrlen);
    listen(socket, 5);

    dd filename = CString("index.html");
    printString(filename);
    printString(filename);
    printString(filename);
    printString(filename);
    printString(filename);
    dd http_response = openHtlmFile(filename);
    dd http_response_len = getStringLen(http_response);
    printString(http_response);
    // Loop do servidor: aceita ligações e envia a resposta HTTP
    while 1 = 1 {
        dd req = accept(socket);

        dd reqString = readFromSocket(req); // Lê os dados do socket do cliente
        printString(reqString);
        dd type = GetTypeOfRequest(reqString);
        printString(type);
        printString(type);
        printString(type);
        
        dd endpoint = GetEndPointOfRequest(reqString);
        printString(endpoint);
        printString(endpoint);
        printString(endpoint);
        socketcall(req, http_response, http_response_len);

        freeMemPage(reqString, 1);
        freeMemPage(endpoint, 1);
        freeMemPage(type, 1);
        
        close(req);
    }

    freeMemPage(addr, 1);


    return 0;
}   
